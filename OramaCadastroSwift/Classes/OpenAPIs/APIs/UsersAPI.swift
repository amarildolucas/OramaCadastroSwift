//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OramaCadastroSwiftAPI {


@objc open class UsersAPI : NSObject {
    /**
     Autentica um usuário que ainda não é cliente.
     
     - parameter usuarioSenhaObjeto: (body) Dados para autenticação do usuário 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAutenticacaoPost(usuarioSenhaObjeto: UsuarioSenhaObjeto, completion: @escaping ((_ data: AutenticacaoObjeto?,_ error: Error?) -> Void)) {
        accountAutenticacaoPostWithRequestBuilder(usuarioSenhaObjeto: usuarioSenhaObjeto).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Autentica um usuário que ainda não é cliente.
     - POST /autenticacao/
     - Autentica um usuário que ainda não é cliente, caso o usuário não existe, ou a combinação de usuário e senha ou ainda o usuário já seja cliente retorna um erro.
     - BASIC:
       - type: http
       - name: JWT
     - parameter usuarioSenhaObjeto: (body) Dados para autenticação do usuário 
     - returns: RequestBuilder<AutenticacaoObjeto> 
     */
    open class func accountAutenticacaoPostWithRequestBuilder(usuarioSenhaObjeto: UsuarioSenhaObjeto) -> RequestBuilder<AutenticacaoObjeto> {
        let path = "/autenticacao/"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usuarioSenhaObjeto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AutenticacaoObjeto>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Confirmação do código para redefinição de senha
     
     - parameter confirmacaoCodigoSMS: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAutenticacaoRedefinirSenhaConfirmarSmsPost(confirmacaoCodigoSMS: ConfirmacaoCodigoSMS? = nil, completion: @escaping ((_ data: ConfirmacaoCodigoSMS?,_ error: Error?) -> Void)) {
        accountAutenticacaoRedefinirSenhaConfirmarSmsPostWithRequestBuilder(confirmacaoCodigoSMS: confirmacaoCodigoSMS).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Confirmação do código para redefinição de senha
     - POST /autenticacao/redefinir-senha/confirmar-sms
     - Confirmação do código para redefinição de senha  - O código recebido via SMS deve ser enviado junto as informações do usuário  - Se o usuário errar o código 3 vezes a solicitação para redefinição de senha será cancelada
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter confirmacaoCodigoSMS: (body)  (optional)
     - returns: RequestBuilder<ConfirmacaoCodigoSMS> 
     */
    open class func accountAutenticacaoRedefinirSenhaConfirmarSmsPostWithRequestBuilder(confirmacaoCodigoSMS: ConfirmacaoCodigoSMS? = nil) -> RequestBuilder<ConfirmacaoCodigoSMS> {
        let path = "/autenticacao/redefinir-senha/confirmar-sms"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: confirmacaoCodigoSMS)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConfirmacaoCodigoSMS>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Solicitar envio do código para redefinição de senha via SMS
     
     - parameter loginRedefinicaoSenha: (body) Dados para criação do login (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAutenticacaoRedefinirSenhaEnviarSmsPost(loginRedefinicaoSenha: LoginRedefinicaoSenha? = nil, completion: @escaping ((_ data: RetornoSolicitacaoRedefinicaoSenha?,_ error: Error?) -> Void)) {
        accountAutenticacaoRedefinirSenhaEnviarSmsPostWithRequestBuilder(loginRedefinicaoSenha: loginRedefinicaoSenha).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Solicitar envio do código para redefinição de senha via SMS
     - POST /autenticacao/redefinir-senha/enviar-sms
     - Solicitar código de redefinição de senha  - Após confirmar a data de nascimento pode ser solicitado código via SMS para redefinir a senha  - O código SMS expira após 15 minutos
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter loginRedefinicaoSenha: (body) Dados para criação do login (optional)
     - returns: RequestBuilder<RetornoSolicitacaoRedefinicaoSenha> 
     */
    open class func accountAutenticacaoRedefinirSenhaEnviarSmsPostWithRequestBuilder(loginRedefinicaoSenha: LoginRedefinicaoSenha? = nil) -> RequestBuilder<RetornoSolicitacaoRedefinicaoSenha> {
        let path = "/autenticacao/redefinir-senha/enviar-sms"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRedefinicaoSenha)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetornoSolicitacaoRedefinicaoSenha>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Salvar nova senha
     
     - parameter envioNovaSenha: (body) Dados para criação do login (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAutenticacaoRedefinirSenhaNovaSenhaPost(envioNovaSenha: EnvioNovaSenha? = nil, completion: @escaping ((_ data: RetornoNovaSenha?,_ error: Error?) -> Void)) {
        accountAutenticacaoRedefinirSenhaNovaSenhaPostWithRequestBuilder(envioNovaSenha: envioNovaSenha).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Salvar nova senha
     - POST /autenticacao/redefinir-senha/nova-senha
     - Salvar nova senha  - A alteração só será confirmada caso o usuário tenha informado o código recebido via SMS
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter envioNovaSenha: (body) Dados para criação do login (optional)
     - returns: RequestBuilder<RetornoNovaSenha> 
     */
    open class func accountAutenticacaoRedefinirSenhaNovaSenhaPostWithRequestBuilder(envioNovaSenha: EnvioNovaSenha? = nil) -> RequestBuilder<RetornoNovaSenha> {
        let path = "/autenticacao/redefinir-senha/nova-senha"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: envioNovaSenha)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetornoNovaSenha>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Solicitar início da redefinição de senha
     
     - parameter solicitacaoRedefinicaoSenha: (body) Dados para criação do login (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAutenticacaoRedefinirSenhaPost(solicitacaoRedefinicaoSenha: SolicitacaoRedefinicaoSenha? = nil, completion: @escaping ((_ data: RetornoSolicitacaoRedefinicaoSenha?,_ error: Error?) -> Void)) {
        accountAutenticacaoRedefinirSenhaPostWithRequestBuilder(solicitacaoRedefinicaoSenha: solicitacaoRedefinicaoSenha).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Solicitar início da redefinição de senha
     - POST /autenticacao/redefinir-senha
     - Solicitar início da redefinição de senha  - Após solicitar a redefinição de senha um código será enviado através de SMS  - O código SMS expira após 15 minutos
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter solicitacaoRedefinicaoSenha: (body) Dados para criação do login (optional)
     - returns: RequestBuilder<RetornoSolicitacaoRedefinicaoSenha> 
     */
    open class func accountAutenticacaoRedefinirSenhaPostWithRequestBuilder(solicitacaoRedefinicaoSenha: SolicitacaoRedefinicaoSenha? = nil) -> RequestBuilder<RetornoSolicitacaoRedefinicaoSenha> {
        let path = "/autenticacao/redefinir-senha"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: solicitacaoRedefinicaoSenha)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetornoSolicitacaoRedefinicaoSenha>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter tipoDocumento
     */
    public enum TipoDocumento_accountDocumentoConfirmacaoGet: String {
        case carteiraDeHabilitaçãoCnh = "Carteira de Habilitação - CNH"
        case passaporte = "Passaporte"
        case cartIdentEstrangeiroRne = "Cart. Ident. Estrangeiro - RNE"
        case cartIdentidadeProfissional = "Cart. Identidade Profissional"
        case carteiraDeIdentidadeRg = "Carteira de Identidade / RG"
        case comprovanteBancário = "Comprovante Bancário"
        case comprovanteDeResidência = "Comprovante de Residência"
    }

    /**
     Consulta o status de confirmação do documento que foi submetido
     
     - parameter cpf: (path) CPF do perfil 
     - parameter tipoDocumento: (query) Tipo do documento 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountDocumentoConfirmacaoGet(cpf: String, tipoDocumento: TipoDocumento_accountDocumentoConfirmacaoGet, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountDocumentoConfirmacaoGetWithRequestBuilder(cpf: cpf, tipoDocumento: tipoDocumento).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Consulta o status de confirmação do documento que foi submetido
     - GET /perfil/{cpf}/documento/confirmacao/
     - Consulta o status de confirmação do documento que foi submetido
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter tipoDocumento: (query) Tipo do documento 
     - returns: RequestBuilder<Void> 
     */
    open class func accountDocumentoConfirmacaoGetWithRequestBuilder(cpf: String, tipoDocumento: TipoDocumento_accountDocumentoConfirmacaoGet) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/documento/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tipoDocumento": tipoDocumento.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tipoDocumento
     */
    public enum TipoDocumento_accountDocumentoPut: String {
        case carteiraDeHabilitaçãoCnh = "Carteira de Habilitação - CNH"
        case passaporte = "Passaporte"
        case cartIdentEstrangeiroRne = "Cart. Ident. Estrangeiro - RNE"
        case cartIdentidadeProfissional = "Cart. Identidade Profissional"
        case carteiraDeIdentidadeRg = "Carteira de Identidade / RG"
        case comprovanteBancário = "Comprovante Bancário"
        case comprovanteDeResidência = "Comprovante de Residência"
    }

    /**
     Anexa ou atualiza documento para conferencia de autenticidade do perfil.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter tipoDocumento: (query) Tipo do documento 
     - parameter filename: (form) Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountDocumentoPut(cpf: String, tipoDocumento: TipoDocumento_accountDocumentoPut, filename: URL, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountDocumentoPutWithRequestBuilder(cpf: cpf, tipoDocumento: tipoDocumento, filename: filename).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Anexa ou atualiza documento para conferencia de autenticidade do perfil.
     - PUT /perfil/{cpf}/documento/
     - Anexa ou atualiza documento que será usado no processo conferencia de autenticidade do perfil. É recomendado fazer o upload de documentos para comprovação de identidade. Caso o perfil tiver conta bancária conjunta ou a conta seja do banco Itaú é recomendado o upload do documento 'Comprovante Bancário'.
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter tipoDocumento: (query) Tipo do documento 
     - parameter filename: (form) Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG 
     - returns: RequestBuilder<Void> 
     */
    open class func accountDocumentoPutWithRequestBuilder(cpf: String, tipoDocumento: TipoDocumento_accountDocumentoPut, filename: URL) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/documento/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let formParams: [String:Any?] = [
            "filename": filename.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tipoDocumento": tipoDocumento.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cria um login para usuário.
     
     - parameter loginSenhaObjeto: (body) Dados para criação do login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountIdentificacaoPost(loginSenhaObjeto: LoginSenhaObjeto, completion: @escaping ((_ data: LoginCriado?,_ error: Error?) -> Void)) {
        accountIdentificacaoPostWithRequestBuilder(loginSenhaObjeto: loginSenhaObjeto).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cria um login para usuário.
     - POST /identificacao/
     - Cria um novo login que será usado para acesso ao sistema.
     - parameter loginSenhaObjeto: (body) Dados para criação do login 
     - returns: RequestBuilder<LoginCriado> 
     */
    open class func accountIdentificacaoPostWithRequestBuilder(loginSenhaObjeto: LoginSenhaObjeto) -> RequestBuilder<LoginCriado> {
        let path = "/identificacao/"
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginSenhaObjeto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginCriado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Retorna o estado de aprovação de um perfil
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilAprovacaoGet(cpf: String, completion: @escaping ((_ data: Aprovacao?,_ error: Error?) -> Void)) {
        accountPerfilAprovacaoGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retorna o estado de aprovação de um perfil
     - GET /perfil/{cpf}/aprovacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Aprovacao> 
     */
    open class func accountPerfilAprovacaoGetWithRequestBuilder(cpf: String) -> RequestBuilder<Aprovacao> {
        var path = "/perfil/{cpf}/aprovacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Aprovacao>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verifica se a assinatura eletronica já foi definida.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilAssinaturaEletronicaGet(cpf: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilAssinaturaEletronicaGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Verifica se a assinatura eletronica já foi definida.
     - GET /perfil/{cpf}/assinatura-eletronica/
     - Verifica se a assinatura eletronica já foi definida.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilAssinaturaEletronicaGetWithRequestBuilder(cpf: String) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/assinatura-eletronica/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Realiza o cadastro da assinatura eletrônica do perfil.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter assinaturaEletronica: (body) Dados para criação da assinatura eletrônica 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilAssinaturaEletronicaPost(cpf: String, assinaturaEletronica: AssinaturaEletronica, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilAssinaturaEletronicaPostWithRequestBuilder(cpf: cpf, assinaturaEletronica: assinaturaEletronica).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Realiza o cadastro da assinatura eletrônica do perfil.
     - POST /perfil/{cpf}/assinatura-eletronica/
     - Cadastra a assinatura eletrônica do perfil, realiza validação da assinatura eletronica.  A assinatura deve respeitar as seguintes condições: - Conter de 6 a 15 dígitos - Conter apenas letras e números - Não deve conter 6 ou mais dígitos sequênciais, ex.: 'abcdef', '123456' - Se a assinatura contém entre 6 e 7 dígitos não deve repetir 3 dígitos seguidos, ex.: '111', 'aaa' - Se a assinatura contém entre 8 e 12 dígitos não deve repetir 4 dígitos seguidos, ex.: '1111', 'aaaa' - Se a assinatura contém entre 13 e 14 dígitos não deve repetir 5 dígitos seguidos, ex.: '11111', 'aaaaa' - Se a assinatura contém 15 dígitos não deve repetir 6 dígitos seguidos, ex.: '111111', 'aaaaaa' - A assinatura não deve conter nenhuma das palavras a seguir:      'select', 'update', 'insert', 'delete', 'drop', 'truncate', 'waitfor', 'delay', 'where', 'from', 'having', 'script', 'applet', 'sha1'
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter assinaturaEletronica: (body) Dados para criação da assinatura eletrônica 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilAssinaturaEletronicaPostWithRequestBuilder(cpf: String, assinaturaEletronica: AssinaturaEletronica) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/assinatura-eletronica/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assinaturaEletronica)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Estado atual de confirmação do celular
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilCelularAutenticacaoConfirmacaoGet(cpf: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilCelularAutenticacaoConfirmacaoGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Estado atual de confirmação do celular
     - GET /perfil/{cpf}/celular/autenticacao/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilCelularAutenticacaoConfirmacaoGetWithRequestBuilder(cpf: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/celular/autenticacao/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gera um código para iniciar o processo de validação do número do celular
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilCelularAutenticacaoPost(cpf: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilCelularAutenticacaoPostWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Gera um código para iniciar o processo de validação do número do celular
     - POST /perfil/{cpf}/celular/autenticacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilCelularAutenticacaoPostWithRequestBuilder(cpf: String) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/celular/autenticacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirma o numero de celular, concluindo a validação
     
     - parameter cpf: (path) CPF do perfil 
     - parameter codigo: (query) Código de validação para confirmar o número de celular 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilCelularConfirmacaoPost(cpf: String, codigo: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilCelularConfirmacaoPostWithRequestBuilder(cpf: cpf, codigo: codigo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Confirma o numero de celular, concluindo a validação
     - POST /perfil/{cpf}/celular/autenticacao/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter codigo: (query) Código de validação para confirmar o número de celular 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilCelularConfirmacaoPostWithRequestBuilder(cpf: String, codigo: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/celular/autenticacao/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codigo": codigo.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Estado atual de confirmação do email
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilEmailAutenticacaoConfirmacaoGet(cpf: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilEmailAutenticacaoConfirmacaoGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Estado atual de confirmação do email
     - GET /perfil/{cpf}/email/autenticacao/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilEmailAutenticacaoConfirmacaoGetWithRequestBuilder(cpf: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/email/autenticacao/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gera um código para iniciar o processo de validação do email
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilEmailAutenticacaoPost(cpf: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilEmailAutenticacaoPostWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Gera um código para iniciar o processo de validação do email
     - POST /perfil/{cpf}/email/autenticacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilEmailAutenticacaoPostWithRequestBuilder(cpf: String) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/email/autenticacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirma o email, concluindo a validação
     
     - parameter cpf: (path) CPF do perfil 
     - parameter codigo: (query) Código de validação para confirmar o email 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilEmailConfirmacaoPost(cpf: String, codigo: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilEmailConfirmacaoPostWithRequestBuilder(cpf: cpf, codigo: codigo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Confirma o email, concluindo a validação
     - POST /perfil/{cpf}/email/autenticacao/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter codigo: (query) Código de validação para confirmar o email 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilEmailConfirmacaoPostWithRequestBuilder(cpf: String, codigo: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/email/autenticacao/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codigo": codigo.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retorna o perfil de um usuário que ainda não foi transformado em cliente.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter campos: (query) Lista de campos para ser inclusivamente filtrados (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilGet(cpf: String, campos: String? = nil, completion: @escaping ((_ data: RetornoPerfilUsuario?,_ error: Error?) -> Void)) {
        accountPerfilGetWithRequestBuilder(cpf: cpf, campos: campos).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retorna o perfil de um usuário que ainda não foi transformado em cliente.
     - GET /perfil/{cpf}/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter campos: (query) Lista de campos para ser inclusivamente filtrados (optional)
     - returns: RequestBuilder<RetornoPerfilUsuario> 
     */
    open class func accountPerfilGetWithRequestBuilder(cpf: String, campos: String? = nil) -> RequestBuilder<RetornoPerfilUsuario> {
        var path = "/perfil/{cpf}/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "campos": campos?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<RetornoPerfilUsuario>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retorna lista de pendências do perfil caso existam
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilPendenciaGet(cpf: String, completion: @escaping ((_ data: [Pendencia]?,_ error: Error?) -> Void)) {
        accountPerfilPendenciaGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retorna lista de pendências do perfil caso existam
     - GET /perfil/{cpf}/pendencia/
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<[Pendencia]> 
     */
    open class func accountPerfilPendenciaGetWithRequestBuilder(cpf: String) -> RequestBuilder<[Pendencia]> {
        var path = "/perfil/{cpf}/pendencia/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Pendencia]>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Solicita a análise das pendências. Este endpoint deve ser utilizado após o upload dos documentos relacionados as pendências.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilPendenciaSolicitaranalisePost(cpf: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilPendenciaSolicitaranalisePostWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Solicita a análise das pendências. Este endpoint deve ser utilizado após o upload dos documentos relacionados as pendências.
     - POST /perfil/{cpf}/pendencia/solicitar-analise/
     - API Key:
       - type: apiKey X-Api-Key 
       - name: Api-Key
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilPendenciaSolicitaranalisePostWithRequestBuilder(cpf: String) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/pendencia/solicitar-analise/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Submete o perfil de usuário associado a um login para ser criado como cliente.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilPost(cpf: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilPostWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Submete o perfil de usuário associado a um login para ser criado como cliente.
     - POST /perfil/{cpf}/
     - Submete o perfil de usuário associado a um login para ser criado como cliente. A assinatura eletrônica é obrigatória para a submissão do usuário, ver endpoint /perfil/{cpf}/assinatura-eletronica/. É necessário validar ambos o número do celular e o e-mail para que a submissão seja aceita, veja os endpoints /perfil/{cpf}/celular/autenticacao/ e /perfil/{cpf}/email/autenticacao/. Após submissão deste POST, o perfil não poderá mais ser alterado. Para alterar ou inserir informações no perfil antes de submeter o perfil o método PUT deve ser utilizado.
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilPostWithRequestBuilder(cpf: String) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Atualiza perfil para criação de conta.
     
     - parameter cpf: (path) CPF do perfil 
     - parameter perfilUsuario: (body) Dados para criação ou atualização do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilPut(cpf: String, perfilUsuario: PerfilUsuario, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        accountPerfilPutWithRequestBuilder(cpf: cpf, perfilUsuario: perfilUsuario).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Atualiza perfil para criação de conta.
     - PUT /perfil/{cpf}/
     - Atualiza um perfil de usuário associado a um login para o processo de criação de um usuário. Cada chamada modifica o perfil. Quando o perfil estiver pronto para ser submetido para criação de conta, basta enviar um POST.
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - parameter perfilUsuario: (body) Dados para criação ou atualização do perfil 
     - returns: RequestBuilder<Void> 
     */
    open class func accountPerfilPutWithRequestBuilder(cpf: String, perfilUsuario: PerfilUsuario) -> RequestBuilder<Void> {
        var path = "/perfil/{cpf}/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: perfilUsuario)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Retorna o estado de submissão de um perfil
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilSubmetidoGet(cpf: String, completion: @escaping ((_ data: Submetido?,_ error: Error?) -> Void)) {
        accountPerfilSubmetidoGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retorna o estado de submissão de um perfil
     - GET /perfil/{cpf}/submetido/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Submetido> 
     */
    open class func accountPerfilSubmetidoGetWithRequestBuilder(cpf: String) -> RequestBuilder<Submetido> {
        var path = "/perfil/{cpf}/submetido/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Submetido>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Estado atual de confirmação do aceite de termos
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilTermosConfirmacaoGet(cpf: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilTermosConfirmacaoGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Estado atual de confirmação do aceite de termos
     - GET /perfil/{cpf}/termos/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilTermosConfirmacaoGetWithRequestBuilder(cpf: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/termos/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirma o aceite de termos
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilTermosConfirmacaoPost(cpf: String, completion: @escaping ((_ data: Confirmado?,_ error: Error?) -> Void)) {
        accountPerfilTermosConfirmacaoPostWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Confirma o aceite de termos
     - POST /perfil/{cpf}/termos/confirmacao/
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<Confirmado> 
     */
    open class func accountPerfilTermosConfirmacaoPostWithRequestBuilder(cpf: String) -> RequestBuilder<Confirmado> {
        var path = "/perfil/{cpf}/termos/confirmacao/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Confirmado>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Consulta os termos requeridos para o perfil
     
     - parameter cpf: (path) CPF do perfil 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPerfilTermosGet(cpf: String, completion: @escaping ((_ data: [Termos]?,_ error: Error?) -> Void)) {
        accountPerfilTermosGetWithRequestBuilder(cpf: cpf).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Consulta os termos requeridos para o perfil
     - GET /perfil/{cpf}/termos/
     - Consulta os termos exigidos para o perfil
     - BASIC:
       - type: http
       - name: JWT
     - parameter cpf: (path) CPF do perfil 
     - returns: RequestBuilder<[Termos]> 
     */
    open class func accountPerfilTermosGetWithRequestBuilder(cpf: String) -> RequestBuilder<[Termos]> {
        var path = "/perfil/{cpf}/termos/"
        let cpfPreEscape = "\(APIHelper.mapValueToPathItem(cpf))"
        let cpfPostEscape = cpfPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cpf}", with: cpfPostEscape, options: .literal, range: nil)
        let URLString = OramaCadastroSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Termos]>.Type = OramaCadastroSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
